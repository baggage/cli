#!/bin/bash

trap "exit 1" TERM
TOP_PID=$$

Helpers()
{
  fatal()
  {
    echo "$1" >&2
    exit 1
  }

  # From http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script
  rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""

    for (( pos=0 ; pos<strlen ; pos++ )); do
       c=${string:$pos:1}
       case "$c" in
          [-_.~a-zA-Z0-9] ) o="${c}" ;;
          * )               printf -v o '%%%02x' "'$c"
       esac
       encoded+="${o}"
    done
    echo "${encoded}"    # You can either set a return variable (FASTER) 
    REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
  }
}


Baggage()
{

  new()
  {
    if [ -z "$BAGGAGE_CONF" ]; then
      BAGGAGE_CONF="$HOME/.baggage"
    fi

    if [ -r "$BAGGAGE_CONF" ]; then
      source "$BAGGAGE_CONF"
    fi

    if [ -z "$BAGGAGE_HOST" ]; then
      BAGGAGE_HOST="api.baggage.io"
    fi

    if [ -z "$BAGGAGE_PROTO" ]; then
      BAGGAGE_PROTO="https"
    fi

    if [ -z "$BAGGAGE_PORT" ]; then
      if [ "$BAGGAGE_PROTO" = "http" ]; then
        BAGGAGE_PORT="80"
      else
        BAGGAGE_PORT="443"
      fi
    fi

    if [ -z "$BAGGAGE_CURL_OPTS" ]; then
      BAGGAGE_CURL_OPTS=(-s -H 'Accept: text/plain')
    fi

    if [ -z "$BAGGAGE_WGET_OPTS" ]; then
      BAGGAGE_WGET_OPTS=(-O - -q --header='Accept: text/plain') 
    fi

    if [ -z "$BAGGAGE_HTTP_COMMAND" ]; then
      COMMAND=$(which curl)
      if [ $? -eq 0 ]; then
        COMMAND_NAME="curl"
      else
        COMMAND=$(which wget)
        if [ $? -eq 0 ]; then
          COMMAND_NAME="wget"
        else
          Helpers;fatal "Please install curl or wget"
        fi
      fi
    else
      COMMAND="$BAGGAGE_HTTP_COMMAND"
      COMMAND_NAME="$BAGGAGE_HTTP_COMMAND_NAME"
    fi
  }

  id()
  {
    echo $BAGGAGE_ID
  }

  email_token()
  {
    echo $BAGGAGE_EMAIL_TOKEN
  }

  admin_token()
  {
    echo $BAGGAGE_ADMIN_TOKEN
  }

  call()
  {
    URL="${BAGGAGE_PROTO}://${BAGGAGE_HOST}:${BAGGAGE_PORT}/${1}"
    if [ "$COMMAND_NAME" = "curl" ]; then
      $COMMAND "${BAGGAGE_CURL_OPTS[@]}" "$URL"
    elif [ "$COMMAND_NAME" = "wget" ]; then
      $COMMAND $BAGGAGE_WGET_OPTS "${BAGGAGE_WGET_OPTS[@]}" "$URL"
    else
      $COMMAND "${BAGGAGE_HTTP_COMMAND_OPTS[@]}" "$URL"
    fi
  }

  call_post()
  {
    url="$1"
    BAGGAGE_CURL_OPTS=(-XPOST --data-binary @- "${BAGGAGE_CURL_OPTS[@]}" -H 'Content-Type: application/octet-stream')

    if [ "$COMMAND_NAME" = "wget" ]; then
      Helpers;fatal "Sorry, you cannot currently POST using wget. Please install curl or use the body parameter"
    fi

    cat | call "$url"
  }

  subscribe()
  {
    email="$1"
    call "subscribe/${email}"
  }

  stats()
  {
    call "stats/$(id)?token=$(admin_token)"
  }

  rotate()
  {
    call "rotate/$(id)?token=$(admin_token)"
  }

  unsubscribe()
  {
    call "unsubscribe/$(id)?token=$(admin_token)"
  }

  send()
  {
    subject=$(Helpers;rawurlencode "$1"); shift
    from=""
    body=""

    if [ -z "$subject" ]; then
      fatal "Subject is required"
    fi

    while [ $# -gt 0 ]; do
      case "$1" in
        -f|--from) shift; from=$(Helpers;rawurlencode "$1");;
        *) body=$(Helpers;rawurlencode "$@"); break;;
      esac
      shift
    done

    call_url="send/$(id)?token=$(email_token)&subject=${subject}"

    if [ -n "$from" ]; then
      call_url="${call_url}&from=${from}"
    fi

    if [ -n "$body" ]; then
      call "${call_url}&body=${body}"
    else
      cat | call_post "$call_url"
    fi
  }

  ping()
  {
    call "ping"
  }

  usage()
  {
    if [ -n "$1" ]; then
      echo "$1"
      echo ""
    fi

    cat <<EOF

Usage: baggage COMMAND [OPTS]

Commands:

    subscribe EMAIL

        Subscribes email address.

    stats

       Retrieves stats for subscription.

    rotate

       Rotates tokens.

    unsubscribe

       Unsubscribes.

    send SUBJECT [OPTS] [BODY]

       Sends email. Options are:

       -f --from       Email from name.
       -b --body       Email body. If not provided, body is read from STDIN.

    ping

       Basic connectivity test.

    help

       This help.

       See https://github.com/baggage/app for full API docs

EOF
  }
}

Baggage;new

command=$1; shift

case "$command" in
  'subscribe') Baggage;subscribe "$@";;
  'stats') Baggage;stats "$@";;
  'rotate') Baggage;rotate "$@";;
  'unsubscribe') Baggage;unsubscribe "$@";;
  'send') Baggage;send "$@";;
  'ping') Baggage;ping "$@";;
  'help') Baggage;usage;;
  *) Baggage;usage "unknown command $command";;
esac
